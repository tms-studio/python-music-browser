{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"installation/","text":"Installation Music-Browser package is available on PyPI . You can install the latest version by running. pip install music-browser","title":"Installation"},{"location":"installation/#installation","text":"Music-Browser package is available on PyPI . You can install the latest version by running. pip install music-browser","title":"Installation"},{"location":"quickstart/","text":"Quickstart","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"plugins/deezer/","text":"Define methods to search tracks on deezer and complete metadata from deezer's database. known_fields property readonly Return a set of known fields that can be returned by complete() method. query ( self , track ) Complete metadata of a track based on simple track data like title, artist, or id. Source code in music_browser/plugins/deezer.py def query ( self , track : SimpleTrack ) -> object : \"\"\" Complete metadata of a track based on simple track data like title, artist, or id. \"\"\" pass search ( self , query ) Return list of tracks matching the query. Parameters: Name Type Description Default query str String describing what track you are looking for. required Returns: Type Description List[music_browser.models.SimpleTrack] List of tracks known by Deezer that matches the query. Source code in music_browser/plugins/deezer.py def search ( self , query : str ) -> List [ SimpleTrack ]: \"\"\" Return list of tracks matching the query. Parameters: query: String describing what track you are looking for. Returns: List of tracks known by Deezer that matches the query. \"\"\" response = requests . get ( \"https://api.deezer.com/search?\" + urlencode ({ \"q\" : query })) tracks = [] for track_data in response . json ()[ \"data\" ]: tracks . append ( SimpleTrack ( album = track_data [ \"album\" ][ \"title\" ], artist = track_data [ \"artist\" ][ \"name\" ], title = track_data [ \"title\" ], cover = \"https://e-cdns-images.dzcdn.net/images/cover/ %s /264x264-000000-80-0-0.jpg\" % track_data [ \"md5_image\" ], source = { \"id\" : str ( track_data [ \"id\" ]), \"platform\" : \"deezer\" }, ) ) return tracks","title":"Deezer"},{"location":"plugins/deezer/#music_browser.plugins.deezer.DeezerPlugin","text":"Define methods to search tracks on deezer and complete metadata from deezer's database.","title":"music_browser.plugins.deezer.DeezerPlugin"},{"location":"plugins/deezer/#music_browser.plugins.deezer.DeezerPlugin.known_fields","text":"Return a set of known fields that can be returned by complete() method.","title":"known_fields"},{"location":"plugins/deezer/#music_browser.plugins.deezer.DeezerPlugin.query","text":"Complete metadata of a track based on simple track data like title, artist, or id. Source code in music_browser/plugins/deezer.py def query ( self , track : SimpleTrack ) -> object : \"\"\" Complete metadata of a track based on simple track data like title, artist, or id. \"\"\" pass","title":"query()"},{"location":"plugins/deezer/#music_browser.plugins.deezer.DeezerPlugin.search","text":"Return list of tracks matching the query. Parameters: Name Type Description Default query str String describing what track you are looking for. required Returns: Type Description List[music_browser.models.SimpleTrack] List of tracks known by Deezer that matches the query. Source code in music_browser/plugins/deezer.py def search ( self , query : str ) -> List [ SimpleTrack ]: \"\"\" Return list of tracks matching the query. Parameters: query: String describing what track you are looking for. Returns: List of tracks known by Deezer that matches the query. \"\"\" response = requests . get ( \"https://api.deezer.com/search?\" + urlencode ({ \"q\" : query })) tracks = [] for track_data in response . json ()[ \"data\" ]: tracks . append ( SimpleTrack ( album = track_data [ \"album\" ][ \"title\" ], artist = track_data [ \"artist\" ][ \"name\" ], title = track_data [ \"title\" ], cover = \"https://e-cdns-images.dzcdn.net/images/cover/ %s /264x264-000000-80-0-0.jpg\" % track_data [ \"md5_image\" ], source = { \"id\" : str ( track_data [ \"id\" ]), \"platform\" : \"deezer\" }, ) ) return tracks","title":"search()"},{"location":"plugins/spotify/","text":"SpotifyAuthentication Manage token based authentication for Spotify Plugin. __init__ ( self , client_id , client_secret ) special Store client_id and client_secret encoded in base64. Parameters: Name Type Description Default client_id str Identifier of your application obtained by declaring your app to Spotify. required client_secret str Secret key of your application obtained by declaring your app to Spotify. required Source code in music_browser/plugins/spotify.py def __init__ ( self , client_id : str , client_secret : str ): \"\"\" Store client_id and client_secret encoded in base64. Arguments: client_id: Identifier of your application obtained by declaring your app to Spotify. client_secret: Secret key of your application obtained by declaring your app to Spotify. \"\"\" # workout base64 header required by spotify to authenticate using client credentials. self . basic_token = b64encode (( \" %s : %s \" % ( client_id , client_secret )) . encode ( \"utf-8\" )) . decode ( \"utf-8\" ) # token lazy loading. Indicates that a new token must be issued from now. self . expires = time . time () authenticate ( self ) Issue a fresh access token and update expiration counter. Source code in music_browser/plugins/spotify.py def authenticate ( self ): \"\"\" Issue a fresh access token and update expiration counter. \"\"\" # exchange client credentials for a token against spotify accounts API. response = requests . post ( \"https://accounts.spotify.com/api/token\" , data = { \"grant_type\" : \"client_credentials\" }, headers = { \"Authorization\" : \"Basic %s \" % self . basic_token , \"Content-Type\" : \"application/x-www-form-urlencoded\" , }, ) # ensure that proper token response has been received if response . status_code != 200 : raise MusicBrowserException ( \"Unable to retrieve access_token from Spotify API.\" ) token_data = response . json () # store useful token data as properties self . access_token = token_data [ \"access_token\" ] self . expires = time . time () + token_data [ \"expires_in\" ] get_token ( self ) Returns: Type Description str A valid access token. If token was stale, it is refreshed before being returned. Source code in music_browser/plugins/spotify.py def get_token ( self ) -> str : \"\"\" Returns: A valid access token. If token was stale, it is refreshed before being returned. \"\"\" # ensure that known token is up-to-date if self . has_expired (): self . authenticate () # ... then return valid access token return self . access_token has_expired ( self ) Check if stored token is still valid. Returns: Type Description bool true if currently stored token is valid, false otherwise. Source code in music_browser/plugins/spotify.py def has_expired ( self ) -> bool : \"\"\" Check if stored token is still valid. Returns: `true` if currently stored token is valid, `false` otherwise. \"\"\" # check if expiration time is passed return self . expires < time . time () SpotifyPlugin Define methods to search tracks on spotify and complete metadata from spotify's database. known_fields property readonly Return a set of known fields that can be returned by complete() method. __init__ ( self , client_id , client_secret ) special Parameters: Name Type Description Default client_id str Identifier of your application obtained by declaring your app to Spotify. required client_secret str Secret key of your application obtained by declaring your app to Spotify. required Source code in music_browser/plugins/spotify.py def __init__ ( self , client_id : str , client_secret : str ): \"\"\" Arguments: client_id: Identifier of your application obtained by declaring your app to Spotify. client_secret: Secret key of your application obtained by declaring your app to Spotify. \"\"\" self . auth = SpotifyAuthentication ( client_id , client_secret ) query ( self , query_params , query_fields ) Complete metadata of a track based on simple track data like title, artist, or id. Source code in music_browser/plugins/spotify.py def query ( self , query_params , query_fields ): \"\"\" Complete metadata of a track based on simple track data like title, artist, or id. \"\"\" pass search ( self , query ) Return list of tracks matching the query. Parameters: Name Type Description Default query str String describing what track you are looking for. required Returns: Type Description List[music_browser.models.SimpleTrack] List of tracks known by Spotify that matches the query. Source code in music_browser/plugins/spotify.py def search ( self , query : str ) -> List [ SimpleTrack ]: \"\"\" Return list of tracks matching the query. Parameters: query: String describing what track you are looking for. Returns: List of tracks known by Spotify that matches the query. \"\"\" r = requests . get ( \"https://api.spotify.com/v1/search?\" + urlencode ({ \"type\" : \"track\" , \"query\" : query }), headers = { \"Authorization\" : \"Bearer %s \" % self . auth . get_token ()}, ) tracks = [] for track_data in r . json ()[ \"tracks\" ][ \"items\" ]: tracks . append ( SimpleTrack ( album = track_data [ \"album\" ][ \"name\" ], artist = track_data [ \"artists\" ][ 0 ][ \"name\" ], title = track_data [ \"name\" ], cover = track_data [ \"album\" ][ \"images\" ][ 0 ][ \"url\" ], source = { \"id\" : track_data [ \"id\" ], \"platform\" : \"spotify\" }, ) ) return tracks","title":"Spotify"},{"location":"plugins/spotify/#music_browser.plugins.spotify","text":"","title":"music_browser.plugins.spotify"},{"location":"plugins/spotify/#music_browser.plugins.spotify.SpotifyAuthentication","text":"Manage token based authentication for Spotify Plugin.","title":"SpotifyAuthentication"},{"location":"plugins/spotify/#music_browser.plugins.spotify.SpotifyAuthentication.__init__","text":"Store client_id and client_secret encoded in base64. Parameters: Name Type Description Default client_id str Identifier of your application obtained by declaring your app to Spotify. required client_secret str Secret key of your application obtained by declaring your app to Spotify. required Source code in music_browser/plugins/spotify.py def __init__ ( self , client_id : str , client_secret : str ): \"\"\" Store client_id and client_secret encoded in base64. Arguments: client_id: Identifier of your application obtained by declaring your app to Spotify. client_secret: Secret key of your application obtained by declaring your app to Spotify. \"\"\" # workout base64 header required by spotify to authenticate using client credentials. self . basic_token = b64encode (( \" %s : %s \" % ( client_id , client_secret )) . encode ( \"utf-8\" )) . decode ( \"utf-8\" ) # token lazy loading. Indicates that a new token must be issued from now. self . expires = time . time ()","title":"__init__()"},{"location":"plugins/spotify/#music_browser.plugins.spotify.SpotifyAuthentication.authenticate","text":"Issue a fresh access token and update expiration counter. Source code in music_browser/plugins/spotify.py def authenticate ( self ): \"\"\" Issue a fresh access token and update expiration counter. \"\"\" # exchange client credentials for a token against spotify accounts API. response = requests . post ( \"https://accounts.spotify.com/api/token\" , data = { \"grant_type\" : \"client_credentials\" }, headers = { \"Authorization\" : \"Basic %s \" % self . basic_token , \"Content-Type\" : \"application/x-www-form-urlencoded\" , }, ) # ensure that proper token response has been received if response . status_code != 200 : raise MusicBrowserException ( \"Unable to retrieve access_token from Spotify API.\" ) token_data = response . json () # store useful token data as properties self . access_token = token_data [ \"access_token\" ] self . expires = time . time () + token_data [ \"expires_in\" ]","title":"authenticate()"},{"location":"plugins/spotify/#music_browser.plugins.spotify.SpotifyAuthentication.get_token","text":"Returns: Type Description str A valid access token. If token was stale, it is refreshed before being returned. Source code in music_browser/plugins/spotify.py def get_token ( self ) -> str : \"\"\" Returns: A valid access token. If token was stale, it is refreshed before being returned. \"\"\" # ensure that known token is up-to-date if self . has_expired (): self . authenticate () # ... then return valid access token return self . access_token","title":"get_token()"},{"location":"plugins/spotify/#music_browser.plugins.spotify.SpotifyAuthentication.has_expired","text":"Check if stored token is still valid. Returns: Type Description bool true if currently stored token is valid, false otherwise. Source code in music_browser/plugins/spotify.py def has_expired ( self ) -> bool : \"\"\" Check if stored token is still valid. Returns: `true` if currently stored token is valid, `false` otherwise. \"\"\" # check if expiration time is passed return self . expires < time . time ()","title":"has_expired()"},{"location":"plugins/spotify/#music_browser.plugins.spotify.SpotifyPlugin","text":"Define methods to search tracks on spotify and complete metadata from spotify's database.","title":"SpotifyPlugin"},{"location":"plugins/spotify/#music_browser.plugins.spotify.SpotifyPlugin.known_fields","text":"Return a set of known fields that can be returned by complete() method.","title":"known_fields"},{"location":"plugins/spotify/#music_browser.plugins.spotify.SpotifyPlugin.__init__","text":"Parameters: Name Type Description Default client_id str Identifier of your application obtained by declaring your app to Spotify. required client_secret str Secret key of your application obtained by declaring your app to Spotify. required Source code in music_browser/plugins/spotify.py def __init__ ( self , client_id : str , client_secret : str ): \"\"\" Arguments: client_id: Identifier of your application obtained by declaring your app to Spotify. client_secret: Secret key of your application obtained by declaring your app to Spotify. \"\"\" self . auth = SpotifyAuthentication ( client_id , client_secret )","title":"__init__()"},{"location":"plugins/spotify/#music_browser.plugins.spotify.SpotifyPlugin.query","text":"Complete metadata of a track based on simple track data like title, artist, or id. Source code in music_browser/plugins/spotify.py def query ( self , query_params , query_fields ): \"\"\" Complete metadata of a track based on simple track data like title, artist, or id. \"\"\" pass","title":"query()"},{"location":"plugins/spotify/#music_browser.plugins.spotify.SpotifyPlugin.search","text":"Return list of tracks matching the query. Parameters: Name Type Description Default query str String describing what track you are looking for. required Returns: Type Description List[music_browser.models.SimpleTrack] List of tracks known by Spotify that matches the query. Source code in music_browser/plugins/spotify.py def search ( self , query : str ) -> List [ SimpleTrack ]: \"\"\" Return list of tracks matching the query. Parameters: query: String describing what track you are looking for. Returns: List of tracks known by Spotify that matches the query. \"\"\" r = requests . get ( \"https://api.spotify.com/v1/search?\" + urlencode ({ \"type\" : \"track\" , \"query\" : query }), headers = { \"Authorization\" : \"Bearer %s \" % self . auth . get_token ()}, ) tracks = [] for track_data in r . json ()[ \"tracks\" ][ \"items\" ]: tracks . append ( SimpleTrack ( album = track_data [ \"album\" ][ \"name\" ], artist = track_data [ \"artists\" ][ 0 ][ \"name\" ], title = track_data [ \"name\" ], cover = track_data [ \"album\" ][ \"images\" ][ 0 ][ \"url\" ], source = { \"id\" : track_data [ \"id\" ], \"platform\" : \"spotify\" }, ) ) return tracks","title":"search()"}]}